{"version":3,"sources":["_menu.js","_search.js","intersectionObserver.js"],"names":["$","on","toggleClass","last","addClass","$searchConsoleWrapper","$currentlyHidden","find","$currentlyVisible","siblings","not","removeClass","createObserver","threshold","IntersectionObserver","entries","_step","_iterator","_createForOfIteratorHelper","s","n","done","entry","value","isIntersecting","target","classList","add","err","e","f","handleResize","window","innerWidth","observer","disconnect","observerTargets","forEach","observerTarget","observe","debounce","func","wait","timeout","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","_this","document","querySelectorAll","addEventListener"],"mappings":"AAAAA,EAAE,YAAY,EAAEC,GAAG,QAAS,WAC1BD,EAAE,SAAS,EAAEE,YAAY,UAAU,CACrC,CAAC,ECFDF,EAAE,0DAA0D,EACzDG,KAAK,EACLC,SAAS,kCAAkC,EAE9CJ,EAAE,oBAAoB,EAAEC,GAAG,QAAS,WAClC,IAAMI,EAAwBL,EAAE,yBAAyB,EAGnDM,EAAmBD,EAAsBE,KAAK,SAAS,EACvDC,EAAoBF,EAAiBG,SAAS,EAAEC,IAAI,SAAS,EAGnEJ,EAAiBJ,YAAY,QAAQ,EACrCM,EAAkBN,YAAY,QAAQ,EAGtCG,EACGE,KAAK,oBAAoB,EACzBI,YAAY,mBAAmB,EAGlCL,EAAiBK,YAAY,QAAQ,EAAEP,SAAS,mBAAmB,CACrE,CAAC,E,snCCtBD,IAAMQ,eAAiB,SAACC,GACtB,OAAO,IAAIC,qBACT,SAACC,GAAY,IACgBC,EADhBC,EAAAC,2BACSH,CAAO,EAAA,IAA3B,IAAAE,EAAAE,EAAA,EAAA,EAAAH,EAAAC,EAAAG,EAAA,GAAAC,MAA6B,CAAA,IAAlBC,EAAKN,EAAAO,MACOD,EAAME,gBAEzBF,EAAMG,OAAOC,UAAUC,IAAI,SAAS,CAExC,CAAC,CAAA,MAAAC,GAAAX,EAAAY,EAAAD,CAAA,CAAA,CAAA,QAAAX,EAAAa,EAAA,CAAA,CACH,EACA,CAAEjB,UAAWA,CAAU,CACzB,CACF,EAGIA,UAAY,GAGVkB,aAAe,WAEjBlB,UADEmB,OAAOC,WAAa,KACV,GAEA,GAGdC,SAASC,WAAW,EACpBD,SAAWtB,eAAeC,SAAS,EAGnCuB,gBAAgBC,QAAQ,SAACC,GACvBJ,SAASK,QAAQD,CAAc,CACjC,CAAC,CACH,EAGME,SAAW,SAACC,EAAMC,GACtB,IAAIC,EACJ,OAAO,WAAa,IAAA,IAAAC,EAAAC,UAAAC,OAATC,EAAI,IAAAC,MAAAJ,CAAA,EAAAK,EAAA,EAAAA,EAAAL,EAAAK,CAAA,GAAJF,EAAIE,GAAAJ,UAAAI,GACbC,aAAaP,CAAO,EACpBA,EAAUQ,WAAW,WAAA,OAAMV,EAAKW,MAAMC,MAAMN,CAAI,CAAC,EAAEL,CAAI,CACzD,CACF,EAGIR,SAAWtB,eAAeC,SAAS,EAGjCuB,gBAAkBkB,SAASC,iBAAiB,UAAU,EAC5DnB,gBAAgBC,QAAQ,SAACC,GACvBJ,SAASK,QAAQD,CAAc,CACjC,CAAC,EAGDN,OAAOwB,iBAAiB,SAAUhB,SAAST,aAAc,GAAG,CAAC,EAG7DA,aAAa","file":"main.min.js","sourcesContent":["$(\".hamburger\").on(\"click\", function () {\n  $(\".header\").toggleClass(\"nav-open\");\n});\n","$(\".search-console-bar-classic .search-console-bar-dropdown\")\n  .last()\n  .addClass(\"search-console-bar-dropdown-last\");\n\n$(\".js-search-shuffle\").on(\"click\", function () {\n  const $searchConsoleWrapper = $(\".search-console-wrapper\");\n\n  // Find the element that is currently hidden and the one that is currently visible\n  const $currentlyHidden = $searchConsoleWrapper.find(\".d-none\");\n  const $currentlyVisible = $currentlyHidden.siblings().not(\".d-none\");\n\n  // Toggle the 'd-none' class\n  $currentlyHidden.toggleClass(\"d-none\");\n  $currentlyVisible.toggleClass(\"d-none\");\n\n  // Remove 'search-bar-active' from any currently active element\n  $searchConsoleWrapper\n    .find(\".search-bar-active\")\n    .removeClass(\"search-bar-active\");\n\n  // Add 'search-bar-active' to the element that just became visible\n  $currentlyHidden.removeClass(\"d-none\").addClass(\"search-bar-active\");\n});\n","const createObserver = (threshold) => {\n  return new IntersectionObserver(\n    (entries) => {\n      for (const entry of entries) {\n        const intersecting = entry.isIntersecting;\n        if (intersecting) {\n          entry.target.classList.add(\"in-view\");\n        }\n      }\n    },\n    { threshold: threshold }\n  );\n};\n\n// Default threshold\nlet threshold = 0.7;\n\n// Function to handle screen size changes\nconst handleResize = () => {\n  if (window.innerWidth < 1200) {\n    threshold = 0.5; // Smaller threshold for small screens\n  } else {\n    threshold = 0.6; // Default threshold for larger screens\n  }\n  // Create a new observer with the updated threshold\n  observer.disconnect(); // Disconnect the old observer\n  observer = createObserver(threshold);\n\n  // Reobserve all targets\n  observerTargets.forEach((observerTarget) => {\n    observer.observe(observerTarget);\n  });\n};\n\n// Debounce function to limit the rate of handleResize execution\nconst debounce = (func, wait) => {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n};\n\n// Initial observer creation\nlet observer = createObserver(threshold);\n\n// Select all elements to be observed\nconst observerTargets = document.querySelectorAll(\".observe\");\nobserverTargets.forEach((observerTarget) => {\n  observer.observe(observerTarget);\n});\n\n// Add debounced event listener for resize\nwindow.addEventListener(\"resize\", debounce(handleResize, 200));\n\n// Initial call to set the correct threshold based on the current screen size\nhandleResize();\n"]}